/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query GetCategories($category_uid: String!) {\n    categories(filters: { category_uid: { eq: $category_uid } }) {\n      total_count\n      items {\n        uid\n        level\n        name\n        path\n        children_count\n        children {\n          uid\n          url_key\n          url_path\n          canonical_url\n          level\n          name\n          path\n          children_count\n          include_in_menu\n          mega_menu\n        }\n      }\n      page_info {\n        current_page\n        page_size\n        total_pages\n      }\n    }\n  }\n": types.GetCategoriesDocument,
    "\n  query GetCurrentRootCategory($url_path: String) {\n    categories(filters: { url_path: { eq: $url_path } }) {\n      items {\n        name\n        meta_title\n        meta_description\n        meta_keywords\n        url_path\n        canonical_url\n        uid\n        id\n        product_count\n        children {\n          uid\n          url_key\n          url_path\n          canonical_url\n          name\n          product_count\n        }\n      }\n    }\n  }\n": types.GetCurrentRootCategoryDocument,
    "\n    query GetProducts(\n      $keyword: String\n      $filter: ProductAttributeFilterInput\n      $sort: ProductAttributeSortInput\n      $pageSize: Int!\n      $page: Int!\n    ) {\n      products(\n        search: $keyword\n        filter: $filter\n        pageSize: $pageSize\n        currentPage: $page\n        sort: $sort\n      ) {\n        total_count\n        aggregations(\n          filter: { category: { includeDirectChildrenOnly: true } }\n        ) {\n          attribute_code\n          count\n          label\n          options {\n            count\n            label\n            value\n          }\n        }\n        sort_fields {\n          default\n          options {\n            label\n            value\n            default_direction\n            use_sort_direction\n          }\n        }\n        total_count\n        page_info {\n          page_size\n          current_page\n          total_pages\n        }\n        items {\n          id\n          uid\n          name\n          __typename\n          sku\n          supplier_sku\n          canonical_url\n          url_key\n          stock_status\n          color\n          size\n          brand\n          image {\n            url\n            label\n          }\n          price_range {\n            minimum_price {\n              discount {\n                amount_off\n                percent_off\n              }\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n            maximum_price {\n              discount {\n                amount_off\n                percent_off\n              }\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n          }\n          ... on ConfigurableProduct {\n            variants {\n              attributes {\n                code\n                label\n                value_index\n                uid\n              }\n              product {\n                uid\n                id\n                name\n                brand\n                sku\n                supplier_sku\n                color\n                size\n                stock_status\n                url_key\n                price_range {\n                  minimum_price {\n                    discount {\n                      amount_off\n                      percent_off\n                    }\n                    final_price {\n                      currency\n                      value\n                    }\n                    regular_price {\n                      currency\n                      value\n                    }\n                  }\n                  maximum_price {\n                    discount {\n                      amount_off\n                      percent_off\n                    }\n                    final_price {\n                      currency\n                      value\n                    }\n                    regular_price {\n                      currency\n                      value\n                    }\n                  }\n                }\n                __typename\n              }\n            }\n            products {\n              color\n              entity_id\n            }\n          }\n        }\n      }\n    }\n  ": types.GetProductsDocument,
    "\n  query GetStoreConfig {\n    storeConfig {\n      store_name\n      website_name\n      root_category_uid\n      catalog_default_sort_by\n      secure_base_media_url\n      head_shortcut_icon\n      store_code\n      list_per_page\n      grid_per_page\n    }\n  }\n": types.GetStoreConfigDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCategories($category_uid: String!) {\n    categories(filters: { category_uid: { eq: $category_uid } }) {\n      total_count\n      items {\n        uid\n        level\n        name\n        path\n        children_count\n        children {\n          uid\n          url_key\n          url_path\n          canonical_url\n          level\n          name\n          path\n          children_count\n          include_in_menu\n          mega_menu\n        }\n      }\n      page_info {\n        current_page\n        page_size\n        total_pages\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCategories($category_uid: String!) {\n    categories(filters: { category_uid: { eq: $category_uid } }) {\n      total_count\n      items {\n        uid\n        level\n        name\n        path\n        children_count\n        children {\n          uid\n          url_key\n          url_path\n          canonical_url\n          level\n          name\n          path\n          children_count\n          include_in_menu\n          mega_menu\n        }\n      }\n      page_info {\n        current_page\n        page_size\n        total_pages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCurrentRootCategory($url_path: String) {\n    categories(filters: { url_path: { eq: $url_path } }) {\n      items {\n        name\n        meta_title\n        meta_description\n        meta_keywords\n        url_path\n        canonical_url\n        uid\n        id\n        product_count\n        children {\n          uid\n          url_key\n          url_path\n          canonical_url\n          name\n          product_count\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCurrentRootCategory($url_path: String) {\n    categories(filters: { url_path: { eq: $url_path } }) {\n      items {\n        name\n        meta_title\n        meta_description\n        meta_keywords\n        url_path\n        canonical_url\n        uid\n        id\n        product_count\n        children {\n          uid\n          url_key\n          url_path\n          canonical_url\n          name\n          product_count\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetProducts(\n      $keyword: String\n      $filter: ProductAttributeFilterInput\n      $sort: ProductAttributeSortInput\n      $pageSize: Int!\n      $page: Int!\n    ) {\n      products(\n        search: $keyword\n        filter: $filter\n        pageSize: $pageSize\n        currentPage: $page\n        sort: $sort\n      ) {\n        total_count\n        aggregations(\n          filter: { category: { includeDirectChildrenOnly: true } }\n        ) {\n          attribute_code\n          count\n          label\n          options {\n            count\n            label\n            value\n          }\n        }\n        sort_fields {\n          default\n          options {\n            label\n            value\n            default_direction\n            use_sort_direction\n          }\n        }\n        total_count\n        page_info {\n          page_size\n          current_page\n          total_pages\n        }\n        items {\n          id\n          uid\n          name\n          __typename\n          sku\n          supplier_sku\n          canonical_url\n          url_key\n          stock_status\n          color\n          size\n          brand\n          image {\n            url\n            label\n          }\n          price_range {\n            minimum_price {\n              discount {\n                amount_off\n                percent_off\n              }\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n            maximum_price {\n              discount {\n                amount_off\n                percent_off\n              }\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n          }\n          ... on ConfigurableProduct {\n            variants {\n              attributes {\n                code\n                label\n                value_index\n                uid\n              }\n              product {\n                uid\n                id\n                name\n                brand\n                sku\n                supplier_sku\n                color\n                size\n                stock_status\n                url_key\n                price_range {\n                  minimum_price {\n                    discount {\n                      amount_off\n                      percent_off\n                    }\n                    final_price {\n                      currency\n                      value\n                    }\n                    regular_price {\n                      currency\n                      value\n                    }\n                  }\n                  maximum_price {\n                    discount {\n                      amount_off\n                      percent_off\n                    }\n                    final_price {\n                      currency\n                      value\n                    }\n                    regular_price {\n                      currency\n                      value\n                    }\n                  }\n                }\n                __typename\n              }\n            }\n            products {\n              color\n              entity_id\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetProducts(\n      $keyword: String\n      $filter: ProductAttributeFilterInput\n      $sort: ProductAttributeSortInput\n      $pageSize: Int!\n      $page: Int!\n    ) {\n      products(\n        search: $keyword\n        filter: $filter\n        pageSize: $pageSize\n        currentPage: $page\n        sort: $sort\n      ) {\n        total_count\n        aggregations(\n          filter: { category: { includeDirectChildrenOnly: true } }\n        ) {\n          attribute_code\n          count\n          label\n          options {\n            count\n            label\n            value\n          }\n        }\n        sort_fields {\n          default\n          options {\n            label\n            value\n            default_direction\n            use_sort_direction\n          }\n        }\n        total_count\n        page_info {\n          page_size\n          current_page\n          total_pages\n        }\n        items {\n          id\n          uid\n          name\n          __typename\n          sku\n          supplier_sku\n          canonical_url\n          url_key\n          stock_status\n          color\n          size\n          brand\n          image {\n            url\n            label\n          }\n          price_range {\n            minimum_price {\n              discount {\n                amount_off\n                percent_off\n              }\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n            maximum_price {\n              discount {\n                amount_off\n                percent_off\n              }\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n          }\n          ... on ConfigurableProduct {\n            variants {\n              attributes {\n                code\n                label\n                value_index\n                uid\n              }\n              product {\n                uid\n                id\n                name\n                brand\n                sku\n                supplier_sku\n                color\n                size\n                stock_status\n                url_key\n                price_range {\n                  minimum_price {\n                    discount {\n                      amount_off\n                      percent_off\n                    }\n                    final_price {\n                      currency\n                      value\n                    }\n                    regular_price {\n                      currency\n                      value\n                    }\n                  }\n                  maximum_price {\n                    discount {\n                      amount_off\n                      percent_off\n                    }\n                    final_price {\n                      currency\n                      value\n                    }\n                    regular_price {\n                      currency\n                      value\n                    }\n                  }\n                }\n                __typename\n              }\n            }\n            products {\n              color\n              entity_id\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetStoreConfig {\n    storeConfig {\n      store_name\n      website_name\n      root_category_uid\n      catalog_default_sort_by\n      secure_base_media_url\n      head_shortcut_icon\n      store_code\n      list_per_page\n      grid_per_page\n    }\n  }\n"): (typeof documents)["\n  query GetStoreConfig {\n    storeConfig {\n      store_name\n      website_name\n      root_category_uid\n      catalog_default_sort_by\n      secure_base_media_url\n      head_shortcut_icon\n      store_code\n      list_per_page\n      grid_per_page\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;